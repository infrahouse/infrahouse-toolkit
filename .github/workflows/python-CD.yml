# This workflow will upload a Python Package using Twine when a new commit to main is pushed
---
name: Python Continuous Deployment

on:  # yamllint disable-line rule:truthy
    push:
        branches: ["main"]
    workflow_dispatch:
        inputs:
            debug_enabled:
                type: "boolean"
                description: "Setup a temporary SSH access if a test fails"
                required: false
                default: false

permissions:
    id-token: write  # This is required for requesting the JWT
    contents: read

env:
    ROLE_ARN: "arn:aws:iam::493370826424:role/ih-tf-infrahouse-toolkit-github"

jobs:
    deploy:

        runs-on: ["self-hosted", "Linux", "noble"]
        strategy:
            matrix:
                codename: ["jammy", "noble", "oracular"]
        steps:
            - uses: actions/checkout@v4
            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.13'

            - name: "Setup tmate session"
              uses: "mxschmitt/action-tmate@v3"
              if: "${{ github.event_name == 'workflow_dispatch' && inputs.debug_enabled }}"
              with:
                  limit-access-to-actor: true

            - name: Install dependencies
              run: |
                make bootstrap

            - name: Unit tests
              run: |
                  make test

            - name: Check if Python package version was bumped
              run: |
                  published=$(curl -s https://pypi.org/pypi/infrahouse-toolkit/json | jq -r .info.version)
                  current=$(python -c "from infrahouse_toolkit import __version__; print(__version__)")
                  if [[ "$published" != "$current" ]]
                  then
                    echo "PUBLISH=yes" >> $GITHUB_ENV
                  else
                    echo "PUBLISH=no" >> $GITHUB_ENV
                  fi

            - name: Build Python package
              if: env.PUBLISH == 'yes'
              run: |
                  python -m build

            - name: Publish Python package
              if: ${{ env.PUBLISH == 'yes' && matrix.codename == 'jammy' }}
              uses: pypa/gh-action-pypi-publish@e9ccbe5a211ba3e8363f472cae362b56b104e796
              with:
                  user: __token__
                  password: ${{ secrets.PYPI_API_TOKEN }}

            - name: Check if Debian package version was bumped
              run: |
                  current=$(python -c "from infrahouse_toolkit import __version__; print(__version__)")
                  repo="https://release-${{ matrix.codename }}.infrahouse.com"
                  arch="$(dpkg --print-architecture)"
                  if curl --head --fail $repo/pool/main/i/infrahouse-toolkit/infrahouse-toolkit_${current}-1_$arch.deb
                  then
                    echo "PUBLISH_DEB=no" >> $GITHUB_ENV
                  else
                    echo "PUBLISH_DEB=yes" >> $GITHUB_ENV
                  fi

            - name: Build package
              if: env.PUBLISH_DEB == 'yes'
              run: |
                OS_VERSION=${{ matrix.codename }} make package


            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  role-to-assume: ${{ env.ROLE_ARN }}
                  role-session-name: github-action-infrahouse-toolkit-cd
                  aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

            - name: Publish Debian package
              if: env.PUBLISH_DEB == 'yes'
              run: |
                  ih-s3-reprepro \
                    --aws-region ${{ secrets.AWS_DEFAULT_REGION }} \
                    --bucket infrahouse-release-${{ matrix.codename }} \
                    --gpg-key-secret-id packager-key-${{ matrix.codename }} \
                    --gpg-passphrase-secret-id packager-passphrase-${{ matrix.codename }} \
                    includedeb \
                    ${{ matrix.codename }} \
                    omnibus-infrahouse-toolkit/pkg/infrahouse-toolkit_*.deb

            - name: Run codacy-coverage-reporter
              uses: codacy/codacy-coverage-reporter-action@v1
              with:
                  project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
                  coverage-reports: "coverage.xml"
